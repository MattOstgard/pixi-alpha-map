{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/index","src/AlphaMapMovieClip.js","src/AlphaMapShader.js","src/AlphaMapSprite.js","src/AlphaMapVideoShader.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pixi-alpha-map.js","sourceRoot":"./","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function (global){\n/**\n * @namespace PIXI.alphaMap\n */\n\nvar alphaMap = {\n    AlphaMapShader: require('./AlphaMapShader.js'),\n    AlphaMapVideoShader: require('./AlphaMapVideoShader.js'),\n    AlphaMapSprite: require('./AlphaMapSprite.js'),\n    AlphaMapMovieClip: require('./AlphaMapMovieClip.js')\n}\n\n// Due to a bug in Pixi v3 we have to do mulitple shader instances.\n// Instead of using just one shader, we have to use multiple whenever there is an alpha map texture that is different. \nalphaMap.shaderTexPairs = [];\n\n// \nalphaMap.videoShader = new alphaMap.AlphaMapVideoShader();\n\nmodule.exports = global.PIXI.alphaMap = alphaMap;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG5hbWVzcGFjZSBQSVhJLmFscGhhTWFwXG4gKi9cblxudmFyIGFscGhhTWFwID0ge1xuICAgIEFscGhhTWFwU2hhZGVyOiByZXF1aXJlKCcuL0FscGhhTWFwU2hhZGVyLmpzJyksXG4gICAgQWxwaGFNYXBWaWRlb1NoYWRlcjogcmVxdWlyZSgnLi9BbHBoYU1hcFZpZGVvU2hhZGVyLmpzJyksXG4gICAgQWxwaGFNYXBTcHJpdGU6IHJlcXVpcmUoJy4vQWxwaGFNYXBTcHJpdGUuanMnKSxcbiAgICBBbHBoYU1hcE1vdmllQ2xpcDogcmVxdWlyZSgnLi9BbHBoYU1hcE1vdmllQ2xpcC5qcycpXG59XG5cbi8vIER1ZSB0byBhIGJ1ZyBpbiBQaXhpIHYzIHdlIGhhdmUgdG8gZG8gbXVsaXRwbGUgc2hhZGVyIGluc3RhbmNlcy5cbi8vIEluc3RlYWQgb2YgdXNpbmcganVzdCBvbmUgc2hhZGVyLCB3ZSBoYXZlIHRvIHVzZSBtdWx0aXBsZSB3aGVuZXZlciB0aGVyZSBpcyBhbiBhbHBoYSBtYXAgdGV4dHVyZSB0aGF0IGlzIGRpZmZlcmVudC4gXG5hbHBoYU1hcC5zaGFkZXJUZXhQYWlycyA9IFtdO1xuXG4vLyBcbmFscGhhTWFwLnZpZGVvU2hhZGVyID0gbmV3IGFscGhhTWFwLkFscGhhTWFwVmlkZW9TaGFkZXIoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUElYSS5hbHBoYU1hcCA9IGFscGhhTWFwOyJdfQ==","/**\n * An AlphaMapMovieClip allows the use of two separate images for color and transparency.\n * In most cases this is useful when you want to are using an image format like jpg that does not support transparency.\n *\n * ```js\n * //TODO\n * ```\n *\n * @class\n * @extends PIXI.extras.MovieClip\n * @memberof PIXI.alphaMap\n * @param textures {PIXI.Texture[]} the RGB (color) textures.\n * @param alphaTexture {PIXI.Texture} the Alpha (transparency) textures that correspond to each texture the textures array.\n */\nfunction AlphaMapMovieClip(textures, alphaTextures)\n{\n    PIXI.extras.MovieClip.call(this, textures);\n\n    // Create reusable instance of the shader\n    var shaders = [];\n    for (var i in alphaTextures) {\n        var alphaTexture = alphaTextures[i];\n        var shader = null;\n        for (var i in PIXI.alphaMap.shaderTexPairs) {\n            if (PIXI.alphaMap.shaderTexPairs[i].alphaTexture === alphaTexture) {\n                shader = PIXI.alphaMap.shaderTexPairs[i].shader;\n            }\n        }\n\n        //\n        if (shader === null) {\n            shader = new PIXI.alphaMap.AlphaMapShader();\n            PIXI.alphaMap.shaderTexPairs.push({shader: shader, alphaTexture: alphaTexture});\n        }\n\n        //\n        shaders.push(shader);\n    }\n\n    /**\n     * The shader that will be used to render the sprite. By default this is set to AlphaMapShader.\n     *\n     * @member {PIXI.AbstractFilter|PIXI.Shader}\n     */\n    this.shaders = shaders;\n\n    /**\n     * the Alpha (transparency) textures that correspond to each texture the textures array.\n     *\n     * @member {PIXI.Texture}\n     * @memberof PIXI.AlphaMapMovieClip#\n     */\n    this.alphaTextures = alphaTextures;\n}\n\n// Constructor\nAlphaMapMovieClip.prototype = Object.create(PIXI.extras.MovieClip.prototype);\nAlphaMapMovieClip.prototype.constructor = AlphaMapMovieClip;\nmodule.exports = AlphaMapMovieClip;\n\n/**\n*\n* Renders the object using the WebGL renderer\n*\n* @param renderer {PIXI.WebGLRenderer}\n* @private\n*/\nAlphaMapMovieClip.prototype._renderWebGL = function (renderer)\n{\n    this.shader = this.shaders[this.currentFrame];\n    renderer.setObjectRenderer(renderer.plugins.sprite);\n    this.shader.alphaTexture = this.alphaTextures[this.currentFrame];\n    renderer.plugins.sprite.render(this);\n};","function AlphaMapShader()\n{\n    PIXI.AbstractFilter.call(this,\n        // Vertex shader\n        null,\n\n        // Fragment shader\n        [\n            'precision lowp float;',\n\n            'varying vec2 vTextureCoord;',\n            'varying vec4 vColor;',\n\n            'uniform sampler2D uSampler;',\n            'uniform sampler2D alphaTexture;',\n\n            'void main(void){',\n            '   vec3 color = texture2D(uSampler, vTextureCoord).rgb;',\n            '   float alpha = texture2D(alphaTexture, vTextureCoord).r;',\n            '   gl_FragColor = vec4(color.r, color.g, color.b, alpha) * vColor;',\n            '}'\n        ].join('\\n'),\n\n        // Custom uniforms\n        {\n            alphaTexture: { type: 'sampler2D', value: 0 }\n        }\n    );\n}\n\nAlphaMapShader.prototype = Object.create(PIXI.AbstractFilter.prototype);\nAlphaMapShader.prototype.constructor = AlphaMapShader;\nmodule.exports = AlphaMapShader;\n\nObject.defineProperties(AlphaMapShader.prototype, {\n    /**\n     * Alpha texture to be used as transparency.\n     *\n     * @member {PIXI.Texture}\n     * @memberof PIXI.alphaMap.AlphaMapShader#\n     */\n    alphaTexture: {\n        get: function ()\n        {\n            return this.uniforms.alphaTexture.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.alphaTexture.value = value;\n        }\n    }\n});","/**\n * An AlphaMapSprite allows the use of two separate images for color and transparency.\n * In most cases this is useful when you want to are using an image format like jpg that does not support transparency.\n *\n * ```js\n * //TODO\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI.alphaMap\n * @param texture {PIXI.Texture} the RGB (color) texture.\n * @param alphaTexture {PIXI.Texture} the Alpha (transparency) texture.\n */\nfunction AlphaMapSprite(texture, alphaTexture)\n{\n    PIXI.Sprite.call(this, texture);\n\n    // Create reusable instance of the shader\n    var shader = null;\n    for (var i in PIXI.alphaMap.shaderTexPairs) {\n        if (PIXI.alphaMap.shaderTexPairs[i].alphaTexture === alphaTexture) {\n            shader = PIXI.alphaMap.shaderTexPairs[i].shader;\n        }\n    }\n\n    //\n    if (shader === null) {\n        shader = new PIXI.alphaMap.AlphaMapShader();\n        PIXI.alphaMap.shaderTexPairs.push({shader: shader, alphaTexture: alphaTexture});\n    }\n\n    /**\n     * The shader that will be used to render the sprite. By default this is set to AlphaMapShader.\n     *\n     * @member {PIXI.AbstractFilter|PIXI.Shader}\n     */\n    this.shader = shader;\n\n    /**\n     * The texture that the sprite is using\n     *\n     * @member {PIXI.Texture}\n     * @memberof PIXI.AlphaMapSprite#\n     */\n    this.alphaTexture = alphaTexture;\n}\n\n// Constructor\nAlphaMapSprite.prototype = Object.create(PIXI.Sprite.prototype);\nAlphaMapSprite.prototype.constructor = AlphaMapSprite;\nmodule.exports = AlphaMapSprite;\n\n/**\n*\n* Renders the object using the WebGL renderer\n*\n* @param renderer {PIXI.WebGLRenderer}\n* @private\n*/\nAlphaMapSprite.prototype._renderWebGL = function (renderer)\n{\n    renderer.setObjectRenderer(renderer.plugins.sprite);\n    this.shader.alphaTexture = this.alphaTexture;\n    renderer.plugins.sprite.render(this);\n};","function AlphaMapVideoShader(shaderManager)\n{\n    PIXI.AbstractFilter.call(this,\n        // Vertex shader\n        [\n            'precision lowp float;',\n            'attribute vec2 aVertexPosition;',\n            'attribute vec2 aTextureCoord;',\n            'attribute vec4 aColor;',\n\n            'uniform mat3 projectionMatrix;',\n\n            'varying vec2 vTextureCoord;',\n            'varying vec2 vTextureCoord2;',\n            'varying vec4 vColor;',\n\n            'void main(void){',\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);',\n            '   vTextureCoord = vec2(aTextureCoord.x, aTextureCoord.y * 0.5);',\n            '   vTextureCoord2 = vec2(aTextureCoord.x, (aTextureCoord.y * 0.5) + 0.5);',\n            '   vColor = vec4(aColor.rgb * aColor.a, aColor.a);',\n            '}'\n        ].join('\\n'),\n\n        // Fragment shader\n        [\n            'precision lowp float;',\n\n            'varying vec2 vTextureCoord;',\n            'varying vec2 vTextureCoord2;',\n            'varying vec4 vColor;',\n\n            'uniform sampler2D uSampler;',\n\n            'void main(void){',\n\n            '   float alpha = texture2D(uSampler, vTextureCoord).g;',\n            '   vec3 color = texture2D(uSampler, vTextureCoord2).rgb;',\n                // Remap values so that 0.064 is black because on PC nvidia limits the colors to 16-235 for some stupid\n                // reason. To do this right we would have to load a test video, check the black value the video is\n                // outputting and pick an appropriate shader.\n            '    vec4 nvidiaCrushColors = (vec4(color.rgb, alpha) - 0.063) * 1.06723;',\n            '   gl_FragColor = nvidiaCrushColors * vColor;',\n            '}'\n        ].join('\\n'),\n\n        // Custom uniforms\n        null\n    );\n}\n\n// Constructor\nAlphaMapVideoShader.prototype = Object.create(PIXI.AbstractFilter.prototype);\nAlphaMapVideoShader.prototype.constructor = AlphaMapVideoShader;\nmodule.exports = AlphaMapVideoShader;"]}