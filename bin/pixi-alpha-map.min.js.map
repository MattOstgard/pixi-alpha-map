{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/index","pixi-alpha-map.min.js","src/AlphaMapMovieClip.js","src/AlphaMapShader.js","src/AlphaMapSprite.js","src/AlphaMapVideoShader.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","global","alphaMap","AlphaMapShader","AlphaMapVideoShader","AlphaMapSprite","AlphaMapMovieClip","shader","videoShader","PIXI","this","self","window","./AlphaMapMovieClip.js","./AlphaMapShader.js","./AlphaMapSprite.js","./AlphaMapVideoShader.js",2,"textures","alphaTexture","extras","MovieClip","prototype","Object","create","constructor","_renderWebGL","renderer","setObjectRenderer","plugins","sprite","render",3,"AbstractFilter","join","type","value","defineProperties","get","uniforms","set",4,"texture","Sprite",5,"shaderManager"],"mappings":"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","file":"pixi-alpha-map.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function (global){\n/**\r\n * @namespace PIXI.alphaMap\r\n */\r\n\r\nvar alphaMap = {\r\n    AlphaMapShader: require('./AlphaMapShader.js'),\r\n    AlphaMapVideoShader: require('./AlphaMapVideoShader.js'),\r\n    AlphaMapSprite: require('./AlphaMapSprite.js'),\r\n    AlphaMapMovieClip: require('./AlphaMapMovieClip.js')\r\n}\r\n\r\nalphaMap.shader = null;\r\nalphaMap.videoShader = new alphaMap.AlphaMapVideoShader();\r\n\r\nmodule.exports = global.PIXI.alphaMap = alphaMap;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG5hbWVzcGFjZSBQSVhJLmFscGhhTWFwXHJcbiAqL1xyXG5cclxudmFyIGFscGhhTWFwID0ge1xyXG4gICAgQWxwaGFNYXBTaGFkZXI6IHJlcXVpcmUoJy4vQWxwaGFNYXBTaGFkZXIuanMnKSxcclxuICAgIEFscGhhTWFwVmlkZW9TaGFkZXI6IHJlcXVpcmUoJy4vQWxwaGFNYXBWaWRlb1NoYWRlci5qcycpLFxyXG4gICAgQWxwaGFNYXBTcHJpdGU6IHJlcXVpcmUoJy4vQWxwaGFNYXBTcHJpdGUuanMnKSxcclxuICAgIEFscGhhTWFwTW92aWVDbGlwOiByZXF1aXJlKCcuL0FscGhhTWFwTW92aWVDbGlwLmpzJylcclxufVxyXG5cclxuYWxwaGFNYXAuc2hhZGVyID0gbnVsbDtcclxuYWxwaGFNYXAudmlkZW9TaGFkZXIgPSBuZXcgYWxwaGFNYXAuQWxwaGFNYXBWaWRlb1NoYWRlcigpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUElYSS5hbHBoYU1hcCA9IGFscGhhTWFwOyJdfQ==","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n/**\r\n * @namespace PIXI.alphaMap\r\n */\r\n\r\nvar alphaMap = {\r\n    AlphaMapShader: require('./AlphaMapShader.js'),\r\n    AlphaMapVideoShader: require('./AlphaMapVideoShader.js'),\r\n    AlphaMapSprite: require('./AlphaMapSprite.js'),\r\n    AlphaMapMovieClip: require('./AlphaMapMovieClip.js')\r\n}\r\n\r\nalphaMap.shader = null;\r\nalphaMap.videoShader = new alphaMap.AlphaMapVideoShader();\r\n\r\nmodule.exports = global.PIXI.alphaMap = alphaMap;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./AlphaMapMovieClip.js\":2,\"./AlphaMapShader.js\":3,\"./AlphaMapSprite.js\":4,\"./AlphaMapVideoShader.js\":5}],2:[function(require,module,exports){\n/**\r\n * An AlphaMapMovieClip allows the use of two separate images for color and transparency.\r\n * In most cases this is useful when you want to are using an image format like jpg that does not support transparency.\r\n *\r\n * ```js\r\n * //TODO\r\n * ```\r\n *\r\n * @class\r\n * @extends PIXI.extras.MovieClip\r\n * @memberof PIXI.alphaMap\r\n * @param textures {PIXI.Texture[]} the RGB (color) textures from the same atlas.\r\n * @param alphaTexture {PIXI.Texture} the Alpha (transparency) texture.\r\n */\r\nfunction AlphaMapMovieClip(textures, alphaTexture)\r\n{\r\n    PIXI.extras.MovieClip.call(this, textures);\r\n\r\n    // Create reusable instance of shader and determine which shader to use\r\n    if (!PIXI.alphaMap.shader) {\r\n        PIXI.alphaMap.shader = new PIXI.alphaMap.AlphaMapShader();  \r\n    }\r\n\r\n    /**\r\n     * The shader that will be used to render the sprite. By default this is set to AlphaMapShader.\r\n     *\r\n     * @member {PIXI.AbstractFilter|PIXI.Shader}\r\n     */\r\n    this.shader = PIXI.alphaMap.shader;\r\n\r\n    /**\r\n     * The texture that the sprite is using\r\n     *\r\n     * @member {PIXI.Texture}\r\n     * @memberof PIXI.AlphaMapMovieClip#\r\n     */\r\n    this.alphaTexture = alphaTexture;\r\n}\r\n\r\n// Constructor\r\nAlphaMapMovieClip.prototype = Object.create(PIXI.extras.MovieClip.prototype);\r\nAlphaMapMovieClip.prototype.constructor = AlphaMapMovieClip;\r\nmodule.exports = AlphaMapMovieClip;\r\n\r\n/**\r\n*\r\n* Renders the object using the WebGL renderer\r\n*\r\n* @param renderer {PIXI.WebGLRenderer}\r\n* @private\r\n*/\r\nAlphaMapMovieClip.prototype._renderWebGL = function (renderer)\r\n{\r\n    renderer.setObjectRenderer(renderer.plugins.sprite);\r\n    this.shader.alphaTexture = this.alphaTexture;\r\n    renderer.plugins.sprite.render(this);\r\n};\n},{}],3:[function(require,module,exports){\nfunction AlphaMapShader()\r\n{\r\n    PIXI.AbstractFilter.call(this,\r\n        // Vertex shader\r\n        null,\r\n\r\n        // Fragment shader\r\n        [\r\n            'precision lowp float;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying vec4 vColor;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n            'uniform sampler2D alphaTexture;',\r\n\r\n            'void main(void){',\r\n            '   vec3 color = texture2D(uSampler, vTextureCoord).rgb;',\r\n            '   float alpha = texture2D(alphaTexture, vTextureCoord).r;',\r\n            '   gl_FragColor = vec4(color.r, color.g, color.b, alpha) * vColor;',\r\n            '}'\r\n        ].join('\\n'),\r\n\r\n        // Custom uniforms\r\n        {\r\n            alphaTexture: { type: 'sampler2D', value: 0 }\r\n        }\r\n    );\r\n}\r\n\r\nAlphaMapShader.prototype = Object.create(PIXI.AbstractFilter.prototype);\r\nAlphaMapShader.prototype.constructor = AlphaMapShader;\r\nmodule.exports = AlphaMapShader;\r\n\r\nObject.defineProperties(AlphaMapShader.prototype, {\r\n    /**\r\n     * Alpha texture to be used as transparency.\r\n     *\r\n     * @member {PIXI.Texture}\r\n     * @memberof PIXI.alphaMap.AlphaMapShader#\r\n     */\r\n    alphaTexture: {\r\n        get: function ()\r\n        {\r\n            return this.uniforms.alphaTexture.value;\r\n        },\r\n        set: function (value)\r\n        {\r\n            this.uniforms.alphaTexture.value = value;\r\n        }\r\n    }\r\n});\n},{}],4:[function(require,module,exports){\n/**\r\n * An AlphaMapSprite allows the use of two separate images for color and transparency.\r\n * In most cases this is useful when you want to are using an image format like jpg that does not support transparency.\r\n *\r\n * ```js\r\n * //TODO\r\n * ```\r\n *\r\n * @class\r\n * @extends PIXI.Sprite\r\n * @memberof PIXI.alphaMap\r\n * @param texture {PIXI.Texture} the RGB (color) texture.\r\n * @param alphaTexture {PIXI.Texture} the Alpha (transparency) texture.\r\n */\r\nfunction AlphaMapSprite(texture, alphaTexture)\r\n{\r\n    PIXI.Sprite.call(this, texture);\r\n\r\n    // Create reusable instance of the shader\r\n    if (!PIXI.alphaMap.shader) {\r\n        PIXI.alphaMap.shader = new PIXI.alphaMap.AlphaMapShader();  \r\n    }\r\n\r\n    /**\r\n     * The shader that will be used to render the sprite. By default this is set to AlphaMapShader.\r\n     *\r\n     * @member {PIXI.AbstractFilter|PIXI.Shader}\r\n     */\r\n    this.shader = PIXI.alphaMap.shader;\r\n\r\n    /**\r\n     * The texture that the sprite is using\r\n     *\r\n     * @member {PIXI.Texture}\r\n     * @memberof PIXI.AlphaMapSprite#\r\n     */\r\n    this.alphaTexture = alphaTexture;\r\n}\r\n\r\n// Constructor\r\nAlphaMapSprite.prototype = Object.create(PIXI.Sprite.prototype);\r\nAlphaMapSprite.prototype.constructor = AlphaMapSprite;\r\nmodule.exports = AlphaMapSprite;\r\n\r\n/**\r\n*\r\n* Renders the object using the WebGL renderer\r\n*\r\n* @param renderer {PIXI.WebGLRenderer}\r\n* @private\r\n*/\r\nAlphaMapSprite.prototype._renderWebGL = function (renderer)\r\n{\r\n    renderer.setObjectRenderer(renderer.plugins.sprite);\r\n    this.shader.alphaTexture = this.alphaTexture;\r\n    renderer.plugins.sprite.render(this);\r\n};\n},{}],5:[function(require,module,exports){\nfunction AlphaMapVideoShader(shaderManager)\r\n{\r\n    PIXI.AbstractFilter.call(this,\r\n        // Vertex shader\r\n        [\r\n            'precision lowp float;',\r\n            'attribute vec2 aVertexPosition;',\r\n            'attribute vec2 aTextureCoord;',\r\n            'attribute vec4 aColor;',\r\n\r\n            'uniform mat3 projectionMatrix;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying vec2 vTextureCoord2;',\r\n            'varying vec4 vColor;',\r\n\r\n            'void main(void){',\r\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);',\r\n            '   vTextureCoord = vec2(aTextureCoord.x, aTextureCoord.y * 0.5);',\r\n            '   vTextureCoord2 = vec2(aTextureCoord.x, (aTextureCoord.y * 0.5) + 0.5);',\r\n            '   vColor = vec4(aColor.rgb * aColor.a, aColor.a);',\r\n            '}'\r\n        ].join('\\n'),\r\n\r\n        // Fragment shader\r\n        [\r\n            'precision lowp float;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying vec2 vTextureCoord2;',\r\n            'varying vec4 vColor;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n\r\n            'void main(void){',\r\n\r\n            '   float alpha = texture2D(uSampler, vTextureCoord).g;',\r\n            '   vec3 color = texture2D(uSampler, vTextureCoord2).rgb;',\r\n                // Remap values so that 0.064 is black because on PC nvidia limits the colors to 16-235 for some stupid\r\n                // reason. To do this right we would have to load a test video, check the black value the video is\r\n                // outputting and pick an appropriate shader.\r\n            '    vec4 nvidiaCrushColors = (vec4(color.rgb, alpha) - 0.063) * 1.06723;',\r\n            '   gl_FragColor = nvidiaCrushColors * vColor;',\r\n            '}'\r\n        ].join('\\n'),\r\n\r\n        // Custom uniforms\r\n        null\r\n    );\r\n}\r\n\r\n// Constructor\r\nAlphaMapVideoShader.prototype = Object.create(PIXI.AbstractFilter.prototype);\r\nAlphaMapVideoShader.prototype.constructor = AlphaMapVideoShader;\r\nmodule.exports = AlphaMapVideoShader;\n},{}]},{},[1])\n\n","/**\r\n * An AlphaMapMovieClip allows the use of two separate images for color and transparency.\r\n * In most cases this is useful when you want to are using an image format like jpg that does not support transparency.\r\n *\r\n * ```js\r\n * //TODO\r\n * ```\r\n *\r\n * @class\r\n * @extends PIXI.extras.MovieClip\r\n * @memberof PIXI.alphaMap\r\n * @param textures {PIXI.Texture[]} the RGB (color) textures from the same atlas.\r\n * @param alphaTexture {PIXI.Texture} the Alpha (transparency) texture.\r\n */\r\nfunction AlphaMapMovieClip(textures, alphaTexture)\r\n{\r\n    PIXI.extras.MovieClip.call(this, textures);\r\n\r\n    // Create reusable instance of shader and determine which shader to use\r\n    if (!PIXI.alphaMap.shader) {\r\n        PIXI.alphaMap.shader = new PIXI.alphaMap.AlphaMapShader();  \r\n    }\r\n\r\n    /**\r\n     * The shader that will be used to render the sprite. By default this is set to AlphaMapShader.\r\n     *\r\n     * @member {PIXI.AbstractFilter|PIXI.Shader}\r\n     */\r\n    this.shader = PIXI.alphaMap.shader;\r\n\r\n    /**\r\n     * The texture that the sprite is using\r\n     *\r\n     * @member {PIXI.Texture}\r\n     * @memberof PIXI.AlphaMapMovieClip#\r\n     */\r\n    this.alphaTexture = alphaTexture;\r\n}\r\n\r\n// Constructor\r\nAlphaMapMovieClip.prototype = Object.create(PIXI.extras.MovieClip.prototype);\r\nAlphaMapMovieClip.prototype.constructor = AlphaMapMovieClip;\r\nmodule.exports = AlphaMapMovieClip;\r\n\r\n/**\r\n*\r\n* Renders the object using the WebGL renderer\r\n*\r\n* @param renderer {PIXI.WebGLRenderer}\r\n* @private\r\n*/\r\nAlphaMapMovieClip.prototype._renderWebGL = function (renderer)\r\n{\r\n    renderer.setObjectRenderer(renderer.plugins.sprite);\r\n    this.shader.alphaTexture = this.alphaTexture;\r\n    renderer.plugins.sprite.render(this);\r\n};","function AlphaMapShader()\r\n{\r\n    PIXI.AbstractFilter.call(this,\r\n        // Vertex shader\r\n        null,\r\n\r\n        // Fragment shader\r\n        [\r\n            'precision lowp float;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying vec4 vColor;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n            'uniform sampler2D alphaTexture;',\r\n\r\n            'void main(void){',\r\n            '   vec3 color = texture2D(uSampler, vTextureCoord).rgb;',\r\n            '   float alpha = texture2D(alphaTexture, vTextureCoord).r;',\r\n            '   gl_FragColor = vec4(color.r, color.g, color.b, alpha) * vColor;',\r\n            '}'\r\n        ].join('\\n'),\r\n\r\n        // Custom uniforms\r\n        {\r\n            alphaTexture: { type: 'sampler2D', value: 0 }\r\n        }\r\n    );\r\n}\r\n\r\nAlphaMapShader.prototype = Object.create(PIXI.AbstractFilter.prototype);\r\nAlphaMapShader.prototype.constructor = AlphaMapShader;\r\nmodule.exports = AlphaMapShader;\r\n\r\nObject.defineProperties(AlphaMapShader.prototype, {\r\n    /**\r\n     * Alpha texture to be used as transparency.\r\n     *\r\n     * @member {PIXI.Texture}\r\n     * @memberof PIXI.alphaMap.AlphaMapShader#\r\n     */\r\n    alphaTexture: {\r\n        get: function ()\r\n        {\r\n            return this.uniforms.alphaTexture.value;\r\n        },\r\n        set: function (value)\r\n        {\r\n            this.uniforms.alphaTexture.value = value;\r\n        }\r\n    }\r\n});","/**\r\n * An AlphaMapSprite allows the use of two separate images for color and transparency.\r\n * In most cases this is useful when you want to are using an image format like jpg that does not support transparency.\r\n *\r\n * ```js\r\n * //TODO\r\n * ```\r\n *\r\n * @class\r\n * @extends PIXI.Sprite\r\n * @memberof PIXI.alphaMap\r\n * @param texture {PIXI.Texture} the RGB (color) texture.\r\n * @param alphaTexture {PIXI.Texture} the Alpha (transparency) texture.\r\n */\r\nfunction AlphaMapSprite(texture, alphaTexture)\r\n{\r\n    PIXI.Sprite.call(this, texture);\r\n\r\n    // Create reusable instance of the shader\r\n    if (!PIXI.alphaMap.shader) {\r\n        PIXI.alphaMap.shader = new PIXI.alphaMap.AlphaMapShader();  \r\n    }\r\n\r\n    /**\r\n     * The shader that will be used to render the sprite. By default this is set to AlphaMapShader.\r\n     *\r\n     * @member {PIXI.AbstractFilter|PIXI.Shader}\r\n     */\r\n    this.shader = PIXI.alphaMap.shader;\r\n\r\n    /**\r\n     * The texture that the sprite is using\r\n     *\r\n     * @member {PIXI.Texture}\r\n     * @memberof PIXI.AlphaMapSprite#\r\n     */\r\n    this.alphaTexture = alphaTexture;\r\n}\r\n\r\n// Constructor\r\nAlphaMapSprite.prototype = Object.create(PIXI.Sprite.prototype);\r\nAlphaMapSprite.prototype.constructor = AlphaMapSprite;\r\nmodule.exports = AlphaMapSprite;\r\n\r\n/**\r\n*\r\n* Renders the object using the WebGL renderer\r\n*\r\n* @param renderer {PIXI.WebGLRenderer}\r\n* @private\r\n*/\r\nAlphaMapSprite.prototype._renderWebGL = function (renderer)\r\n{\r\n    renderer.setObjectRenderer(renderer.plugins.sprite);\r\n    this.shader.alphaTexture = this.alphaTexture;\r\n    renderer.plugins.sprite.render(this);\r\n};","function AlphaMapVideoShader(shaderManager)\r\n{\r\n    PIXI.AbstractFilter.call(this,\r\n        // Vertex shader\r\n        [\r\n            'precision lowp float;',\r\n            'attribute vec2 aVertexPosition;',\r\n            'attribute vec2 aTextureCoord;',\r\n            'attribute vec4 aColor;',\r\n\r\n            'uniform mat3 projectionMatrix;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying vec2 vTextureCoord2;',\r\n            'varying vec4 vColor;',\r\n\r\n            'void main(void){',\r\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);',\r\n            '   vTextureCoord = vec2(aTextureCoord.x, aTextureCoord.y * 0.5);',\r\n            '   vTextureCoord2 = vec2(aTextureCoord.x, (aTextureCoord.y * 0.5) + 0.5);',\r\n            '   vColor = vec4(aColor.rgb * aColor.a, aColor.a);',\r\n            '}'\r\n        ].join('\\n'),\r\n\r\n        // Fragment shader\r\n        [\r\n            'precision lowp float;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying vec2 vTextureCoord2;',\r\n            'varying vec4 vColor;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n\r\n            'void main(void){',\r\n\r\n            '   float alpha = texture2D(uSampler, vTextureCoord).g;',\r\n            '   vec3 color = texture2D(uSampler, vTextureCoord2).rgb;',\r\n                // Remap values so that 0.064 is black because on PC nvidia limits the colors to 16-235 for some stupid\r\n                // reason. To do this right we would have to load a test video, check the black value the video is\r\n                // outputting and pick an appropriate shader.\r\n            '    vec4 nvidiaCrushColors = (vec4(color.rgb, alpha) - 0.063) * 1.06723;',\r\n            '   gl_FragColor = nvidiaCrushColors * vColor;',\r\n            '}'\r\n        ].join('\\n'),\r\n\r\n        // Custom uniforms\r\n        null\r\n    );\r\n}\r\n\r\n// Constructor\r\nAlphaMapVideoShader.prototype = Object.create(PIXI.AbstractFilter.prototype);\r\nAlphaMapVideoShader.prototype.constructor = AlphaMapVideoShader;\r\nmodule.exports = AlphaMapVideoShader;"],"sourceRoot":"./"}